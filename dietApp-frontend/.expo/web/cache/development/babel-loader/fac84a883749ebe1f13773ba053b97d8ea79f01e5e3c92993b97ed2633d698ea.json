{"ast":null,"code":"import React, { useRef, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { Svg, Path } from 'react-native-svg';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var ProgressArc = function ProgressArc(_ref) {\n  var percentage = _ref.percentage,\n    width = _ref.width;\n  var circumference = r * A;\n  var size = width - 32;\n  var strokeWidth = 40;\n  var AnimatedPath = Animated.createAnimatedComponent(Path);\n  var PI = Math.PI,\n    cos = Math.cos,\n    sin = Math.sin;\n  var r = (size - strokeWidth) / 2;\n  var cx = size / 2;\n  var cy = size / 2;\n  var A = PI + PI * 0.4;\n  var startAngle = PI + PI * 0.2;\n  var endAngle = 2 * PI - PI * 0.2;\n  var x1 = cx - r * cos(startAngle);\n  var y1 = -r * sin(startAngle) + cy;\n  var x2 = cx - r * cos(endAngle);\n  var y2 = -r * sin(endAngle) + cy;\n  var d = `M ${x2} ${y2} A ${r} ${r} 0 1 1 ${x1} ${y1}`;\n  var translation = useRef(new Animated.Value(0)).current;\n  var strokeDashoffset = translation;\n  useEffect(function () {\n    Animated.timing(translation, {\n      toValue: 724.5 * percentage / 100,\n      duration: 1000,\n      useNativeDriver: true\n    }).start();\n  }, [percentage]);\n  return _jsxs(Svg, {\n    width: size,\n    height: size,\n    children: [_jsxs(Text, {\n      children: [100 - percentage, \"%\"]\n    }), _jsx(Path, {\n      d: d,\n      stroke: \"#cccccc\",\n      strokeWidth: strokeWidth,\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      fill: 'none'\n    }), _jsx(AnimatedPath, {\n      stroke: \"#5460c4\",\n      fill: \"none\",\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      strokeDasharray: `${circumference}, ${circumference}`,\n      d: d,\n      strokeDashoffset: strokeDashoffset,\n      strokeWidth: strokeWidth\n    })]\n  });\n};\nexport default ProgressArc;","map":{"version":3,"names":["React","useRef","useEffect","Text","Dimensions","Animated","Svg","Path","jsxs","_jsxs","jsx","_jsx","ProgressArc","_ref","percentage","width","circumference","r","A","size","strokeWidth","AnimatedPath","createAnimatedComponent","PI","Math","cos","sin","cx","cy","startAngle","endAngle","x1","y1","x2","y2","d","translation","Value","current","strokeDashoffset","timing","toValue","duration","useNativeDriver","start","height","children","stroke","strokeLinecap","strokeLinejoin","fill","strokeDasharray"],"sources":["C:/Users/arekg/Desktop/arcGraph/arcGraph/components/ProgressArc.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport { Text, Dimensions, Animated } from 'react-native';\r\nimport { Svg, Path } from 'react-native-svg';\r\n\r\nexport const ProgressArc = ({ percentage, width }) => {\r\n  const circumference = r * A;\r\n  const size = width - 32;\r\n  const strokeWidth = 40;\r\n  const AnimatedPath = Animated.createAnimatedComponent(Path);\r\n  const { PI, cos, sin } = Math;\r\n  const r = (size - strokeWidth) / 2;\r\n  const cx = size / 2;\r\n  const cy = size / 2;\r\n  const A = PI + PI * 0.4;\r\n  const startAngle = PI + PI * 0.2;\r\n  const endAngle = 2 * PI - PI * 0.2;\r\n  // A rx ry x-axis-rotation large-arc-flag sweep-flag x y\r\n  const x1 = cx - r * cos(startAngle);\r\n  const y1 = -r * sin(startAngle) + cy;\r\n  const x2 = cx - r * cos(endAngle);\r\n  const y2 = -r * sin(endAngle) + cy;\r\n  const d = `M ${x2} ${y2} A ${r} ${r} 0 1 1 ${x1} ${y1}`;\r\n  const translation = useRef(new Animated.Value(0)).current;\r\n\r\n  const strokeDashoffset = translation;\r\n\r\n  useEffect(() => {\r\n    Animated.timing(translation, {\r\n      toValue: (724.5 * percentage) / 100,\r\n      duration: 1000,\r\n      useNativeDriver: true\r\n    }).start();\r\n  }, [percentage]);\r\n\r\n  return (\r\n    <Svg\r\n      width={size}\r\n      height={size}\r\n    >\r\n      <Text>{100 - percentage}%</Text>\r\n      <Path\r\n        d={d}\r\n        stroke=\"#cccccc\"\r\n        strokeWidth={strokeWidth}\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        fill={'none'}\r\n      />\r\n      <AnimatedPath\r\n        stroke=\"#5460c4\"\r\n        fill=\"none\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeDasharray={`${circumference}, ${circumference}`}\r\n        {...{ d, strokeDashoffset, strokeWidth }}\r\n      />\r\n    </Svg>\r\n  );\r\n};\r\n\r\nexport default ProgressArc;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}