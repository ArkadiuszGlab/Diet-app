{"ast":null,"code":"import React, { useRef, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { Svg, Path } from 'react-native-svg';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width;\nvar size = width - 32;\nvar strokeWidth = 50;\nvar AnimatedPath = Animated.createAnimatedComponent(Path);\nvar PI = Math.PI,\n  cos = Math.cos,\n  sin = Math.sin;\nvar r = (size - strokeWidth) / 2;\nvar cx = size / 2;\nvar cy = size / 2;\nvar A = PI + PI * 0.4;\nvar startAngle = PI + PI * 0.2;\nvar endAngle = 2 * PI - PI * 0.2;\nvar x1 = cx - r * cos(startAngle);\nvar y1 = -r * sin(startAngle) + cy;\nvar x2 = cx - r * cos(endAngle);\nvar y2 = -r * sin(endAngle) + cy;\nvar d = `M ${x1} ${y1} A ${r} ${r} 0 1 0 ${x2} ${y2}`;\nexport var ProgressArc = function ProgressArc(_ref) {\n  var percentage = _ref.percentage;\n  var circumference = r * A;\n  var translation = useRef(new Animated.Value(0)).current;\n  var strokeDashoffset = translation;\n  useEffect(function () {\n    Animated.timing(translation, {\n      toValue: percentage,\n      duration: 1000,\n      useNativeDriver: true\n    }).start();\n  }, [percentage]);\n  return _jsxs(Svg, {\n    width: size,\n    height: size,\n    children: [_jsxs(Text, {\n      children: [percentage, \"%\"]\n    }), _jsx(Path, {\n      d: d,\n      stroke: \"#cccccc\",\n      strokeWidth: strokeWidth,\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      fill: 'none'\n    }), _jsx(AnimatedPath, {\n      stroke: \"#5460c4\",\n      fill: \"none\",\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      strokeDasharray: `${circumference}, ${circumference}`,\n      d: d,\n      strokeDashoffset: strokeDashoffset,\n      strokeWidth: strokeWidth\n    })]\n  });\n};\nexport default ProgressArc;","map":{"version":3,"names":["React","useRef","useEffect","Text","Dimensions","Animated","Svg","Path","jsxs","_jsxs","jsx","_jsx","_Dimensions$get","get","width","size","strokeWidth","AnimatedPath","createAnimatedComponent","PI","Math","cos","sin","r","cx","cy","A","startAngle","endAngle","x1","y1","x2","y2","d","ProgressArc","_ref","percentage","circumference","translation","Value","current","strokeDashoffset","timing","toValue","duration","useNativeDriver","start","height","children","stroke","strokeLinecap","strokeLinejoin","fill","strokeDasharray"],"sources":["C:/Users/arekg/Desktop/arcGraph/arcGraph/components/ProgressArc.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport { Text, Dimensions, Animated } from 'react-native';\r\nimport { Svg, Path } from 'react-native-svg';\r\n\r\nconst { width } = Dimensions.get('window');\r\nconst size = width - 32;\r\nconst strokeWidth = 50;\r\nconst AnimatedPath = Animated.createAnimatedComponent(Path);\r\nconst { PI, cos, sin } = Math;\r\nconst r = (size - strokeWidth) / 2;\r\nconst cx = size / 2;\r\nconst cy = size / 2;\r\nconst A = PI + PI * 0.4;\r\nconst startAngle = PI + PI * 0.2;\r\nconst endAngle = 2 * PI - PI * 0.2;\r\n// A rx ry x-axis-rotation large-arc-flag sweep-flag x y\r\nconst x1 = cx - r * cos(startAngle);\r\nconst y1 = -r * sin(startAngle) + cy;\r\nconst x2 = cx - r * cos(endAngle);\r\nconst y2 = -r * sin(endAngle) + cy;\r\nconst d = `M ${x1} ${y1} A ${r} ${r} 0 1 0 ${x2} ${y2}`;\r\n\r\nexport const ProgressArc = ({ percentage }) => {\r\n  const circumference = r * A;\r\n  const translation = useRef(new Animated.Value(0)).current;\r\n\r\n  const strokeDashoffset = translation;\r\n\r\n  useEffect(() => {\r\n    Animated.timing(translation, {\r\n      toValue: percentage,\r\n      duration: 1000,\r\n      useNativeDriver: true\r\n    }).start();\r\n  }, [percentage]);\r\n  return (\r\n    <Svg\r\n      width={size}\r\n      height={size}\r\n    >\r\n      <Text>{percentage}%</Text>\r\n      <Path\r\n        d={d}\r\n        stroke=\"#cccccc\"\r\n        strokeWidth={strokeWidth}\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        fill={'none'}\r\n      />\r\n      <AnimatedPath\r\n        stroke=\"#5460c4\"\r\n        fill=\"none\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeDasharray={`${circumference}, ${circumference}`}\r\n        {...{ d, strokeDashoffset, strokeWidth }}\r\n      />\r\n    </Svg>\r\n  );\r\n};\r\n\r\nexport default ProgressArc;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}