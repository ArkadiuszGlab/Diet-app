{"ast":null,"code":"import React, { useRef, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Svg, Path } from 'react-native-svg';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width;\nwidth = width / 2;\nvar size = width - 32;\nvar strokeWidth = 25;\nvar AnimatedPath = Animated.createAnimatedComponent(Path);\nvar PI = Math.PI,\n  cos = Math.cos,\n  sin = Math.sin;\nvar r = (size - strokeWidth) / 2;\nvar cx = size / 2;\nvar cy = size / 2;\nvar A = PI + PI * 0.4;\nvar startAngle = PI + PI * 0.2;\nvar endAngle = 2 * PI - PI * 0.2;\nvar x1 = cx - r * cos(startAngle);\nvar y1 = -r * sin(startAngle) + cy;\nvar x2 = cx - r * cos(endAngle);\nvar y2 = -r * sin(endAngle) + cy;\nvar d = `M ${x2} ${y2} A ${r} ${r} 0 1 1 ${x1} ${y1}`;\nexport var ProgressArc = function ProgressArc(_ref) {\n  var percentage = _ref.percentage,\n    handleRandomize = _ref.handleRandomize;\n  var circumference = r * A;\n  var translation = useRef(new Animated.Value(0)).current;\n  var strokeDashoffset = translation;\n  useEffect(function () {\n    Animated.timing(translation, {\n      toValue: percentage <= 100 ? circumference * (100 - percentage) / 100 : 1,\n      duration: 1000,\n      useNativeDriver: true\n    }).start();\n  }, [percentage]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(Svg, {\n      width: size,\n      height: size,\n      children: [_jsx(Path, {\n        d: d,\n        stroke: \"#d4f2e5\",\n        strokeWidth: strokeWidth,\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        fill: 'none'\n      }), _jsx(AnimatedPath, {\n        stroke: percentage <= 100 ? '#6bd2a7' : 'red',\n        fill: \"none\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeDasharray: `${circumference}, ${circumference}`,\n        d: d,\n        strokeDashoffset: strokeDashoffset,\n        strokeWidth: strokeWidth\n      })]\n    }), _jsxs(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleRandomize,\n      children: [_jsxs(Text, {\n        style: {\n          fontSize: 30,\n          fontWeight: 'bold',\n          alignSelf: 'center'\n        },\n        children: [Math.ceil(percentage), \"%\"]\n      }), _jsx(Text, {\n        style: {\n          opacity: 0.4\n        },\n        children: \"of daily goal\"\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    alignContent: 'center',\n    justifyContent: 'center',\n    alignItems: 'center',\n    justifyItems: 'center'\n  },\n  button: {\n    position: 'absolute',\n    alignContent: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default ProgressArc;","map":{"version":3,"names":["React","useRef","useEffect","Text","Dimensions","Animated","View","TouchableOpacity","StyleSheet","Svg","Path","jsx","_jsx","jsxs","_jsxs","_Dimensions$get","get","width","size","strokeWidth","AnimatedPath","createAnimatedComponent","PI","Math","cos","sin","r","cx","cy","A","startAngle","endAngle","x1","y1","x2","y2","d","ProgressArc","_ref","percentage","handleRandomize","circumference","translation","Value","current","strokeDashoffset","timing","toValue","duration","useNativeDriver","start","style","styles","container","children","height","stroke","strokeLinecap","strokeLinejoin","fill","strokeDasharray","button","onPress","fontSize","fontWeight","alignSelf","ceil","opacity","create","alignContent","justifyContent","alignItems","justifyItems","position"],"sources":["C:/Users/arekg/Desktop/arcGraph/arcGraph/components/ProgressArc.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport {\r\n  Text,\r\n  Dimensions,\r\n  Animated,\r\n  View,\r\n  TouchableOpacity,\r\n  StyleSheet\r\n} from 'react-native';\r\nimport { Svg, Path } from 'react-native-svg';\r\n\r\nvar { width } = Dimensions.get('window');\r\nwidth = width / 2;\r\nconst size = width - 32;\r\nconst strokeWidth = 25;\r\nconst AnimatedPath = Animated.createAnimatedComponent(Path);\r\nconst { PI, cos, sin } = Math;\r\nconst r = (size - strokeWidth) / 2;\r\nconst cx = size / 2;\r\nconst cy = size / 2;\r\nconst A = PI + PI * 0.4;\r\nconst startAngle = PI + PI * 0.2;\r\nconst endAngle = 2 * PI - PI * 0.2;\r\n// A rx ry x-axis-rotation large-arc-flag sweep-flag x y\r\nconst x1 = cx - r * cos(startAngle);\r\nconst y1 = -r * sin(startAngle) + cy;\r\nconst x2 = cx - r * cos(endAngle);\r\nconst y2 = -r * sin(endAngle) + cy;\r\nconst d = `M ${x2} ${y2} A ${r} ${r} 0 1 1 ${x1} ${y1}`;\r\n\r\nexport const ProgressArc = ({ percentage, handleRandomize }) => {\r\n  const circumference = r * A;\r\n  const translation = useRef(new Animated.Value(0)).current;\r\n\r\n  const strokeDashoffset = translation;\r\n\r\n  useEffect(() => {\r\n    Animated.timing(translation, {\r\n      toValue:\r\n        percentage <= 100 ? (circumference * (100 - percentage)) / 100 : 1,\r\n      duration: 1000,\r\n      useNativeDriver: true\r\n    }).start();\r\n  }, [percentage]);\r\n  return (\r\n    <View style={styles.container}>\r\n      <Svg\r\n        width={size}\r\n        height={size}\r\n      >\r\n        <Path\r\n          d={d}\r\n          stroke=\"#d4f2e5\"\r\n          strokeWidth={strokeWidth}\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          fill={'none'}\r\n        />\r\n        <AnimatedPath\r\n          stroke={percentage <= 100 ? '#6bd2a7' : 'red'}\r\n          fill=\"none\"\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeDasharray={`${circumference}, ${circumference}`}\r\n          {...{ d, strokeDashoffset, strokeWidth }}\r\n        />\r\n      </Svg>\r\n      <TouchableOpacity\r\n        style={styles.button}\r\n        onPress={handleRandomize}\r\n      >\r\n        <Text style={{ fontSize: 30, fontWeight: 'bold', alignSelf: 'center' }}>\r\n          {Math.ceil(percentage)}%\r\n        </Text>\r\n        <Text style={{ opacity: 0.4 }}>of daily goal</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    // flex: 1,\r\n    alignContent: 'center',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    justifyItems: 'center'\r\n  },\r\n  button: {\r\n    // flex: 1,\r\n    position: 'absolute',\r\n    alignContent: 'center',\r\n    justifyContent: 'center'\r\n  }\r\n});\r\n\r\nexport default ProgressArc;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}